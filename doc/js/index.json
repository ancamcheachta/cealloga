[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/cealloga/dev.js",
    "content": "'use strict';\n\nconst Ceallog = require('../classes/Ceallog');\n\nmodule.exports = plugins => {\n    const afterExecute = (req, res, next) => {\n        plugins.forEach(plugin => {\n            plugin.afterExecute.apply(req.ceallog, [req]);\n        });\n        \n        next();\n    };\n    \n    const beforeExecute = (req, res, next) => {\n        plugins.forEach(plugin => {\n            plugin.beforeExecute.apply(req.ceallog, [req]);\n        });\n        \n        next();\n    };\n    \n    const getCeallog = (req, res, next) => {\n        req.ceallog = new Ceallog();\n        \n        plugins.forEach(plugin => {\n            plugin.extend.apply(req.ceallog, [req]);\n        });\n    };\n    \n    const execute = (req, res, next) => {\n        let name = req.params.name;\n        \n        req.cache[name].apply(null, [req.ceallog]);\n        \n        next();\n    };\n    \n    const respond = (req, res, next) => {\n        \n    };\n    \n    const validateService = (req, res, next) => {\n        next();\n    };\n    \n    return [\n        validateService,\n        getCeallog,\n        beforeExecute,\n        execute,\n        afterExecute,\n        respond\n    ];\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/cealloga/dev.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Ceallog",
    "memberof": "src/cealloga/dev.js",
    "static": true,
    "longname": "src/cealloga/dev.js~Ceallog",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga/dev.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/cealloga/prod.js",
    "content": "'use strict';\n\nmodule.exports = plugins => {\n    return (req, res, next) => {\n        \n    };\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/cealloga/prod.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/cealloga/route.js",
    "content": "'use strict';\n\nconst express = require('express');\nconst dev = require('./dev');\nconst prod = require('./prod');\nconst router = express.Router();\nconst settings = require('../settings');\n\nmodule.exports = plugins => {\n    const apiPath = settings.cealloga.api_path;\n    const testPath = settings.cealloga.test_path;\n    \n    if (arguments.length > 1) {\n        plugins = Array.prototype.slice.call(arguments);\n    } else if (arguments.length == 1 && !(arguments[0] instanceof Array)) {\n        plugins = [arguments[0]];\n    } else {\n        plugins = plugins || [];\n    }\n    \n    router.post(`/${apiPath}/${testPath}/:id`, dev(plugins));\n    router.post(`/${apiPath}/:name`, prod(plugins));\n    \n    return router;\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/cealloga/route.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "express",
    "memberof": "src/cealloga/route.js",
    "static": true,
    "longname": "src/cealloga/route.js~express",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga/route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "dev",
    "memberof": "src/cealloga/route.js",
    "static": true,
    "longname": "src/cealloga/route.js~dev",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga/route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "prod",
    "memberof": "src/cealloga/route.js",
    "static": true,
    "longname": "src/cealloga/route.js~prod",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga/route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "router",
    "memberof": "src/cealloga/route.js",
    "static": true,
    "longname": "src/cealloga/route.js~router",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga/route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "settings",
    "memberof": "src/cealloga/route.js",
    "static": true,
    "longname": "src/cealloga/route.js~settings",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga/route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/cealloga.js",
    "content": "/**\n * @desc Launches and manages cealloga server.\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst bodyParser = require('body-parser'),\n\texpress = require('express'),\n\tsettings = require('./settings'),\n\tapp = express(),\n\tport = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\napp.get('/', (req, res) => res.send('Fáilte go dtí cealloga.js'));\napp.use('/code', require('./code/route'));\napp.use(`/${settings.cealloga.api_path}`, require('./cealloga/route')());\n\n/**\n * @ignore\n */\nlet server = app.listen(port, () =>\n\tconsole.log(`Ceallóga app listening on port ${port}`)\n);\n\nmodule.exports = {\n\tlocalhost: `http://127.0.0.1:${port}`,\n\tonListen: callback => {\n\t\tcallback();\n\t},\n\tstop: () => {\n\t\tserver.close();\n\t}\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/cealloga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "bodyParser",
    "memberof": "src/cealloga.js",
    "static": true,
    "longname": "src/cealloga.js~bodyParser",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "server",
    "memberof": "src/cealloga.js",
    "static": true,
    "longname": "src/cealloga.js~server",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/cealloga.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/classes/Ceallog.js",
    "content": "'use strict';\n\n/**\n * @desc An instance of this class is passed into a compiled ceallog\n * function when its corresponding service is called at `/ceallog/*`.\n * During the execution of the ceallog function, this class instance\n * (along with any plugin it exposes) is accessible within the function\n * scope.\n * @since 0.1.0\n */\nclass Ceallog {\n\n}\n\nmodule.exports = Ceallog;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/Ceallog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "Ceallog",
    "memberof": "src/classes/Ceallog.js",
    "static": true,
    "longname": "src/classes/Ceallog.js~Ceallog",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/Ceallog.js",
    "importStyle": null,
    "description": "An instance of this class is passed into a compiled ceallog\nfunction when its corresponding service is called at `/ceallog/*`.\nDuring the execution of the ceallog function, this class instance\n(along with any plugin it exposes) is accessible within the function\nscope.",
    "lineNumber": 11,
    "since": "0.1.0",
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/classes/CompilerError.js",
    "content": "'use strict';\n\n/**\n * @desc Error used by compiler\n * @extends {Error}\n * @since 0.1.0\n */\nclass CompilerError extends Error {\n\t/**\n\t * @param {string} message Message used in error\n\t * @param {Object} node (Optional) node from esprima tree used to\n\t * define location information.\n\t * @since 0.1.0\n\t */\n\tconstructor(message, node) {\n\t\tsuper(message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t\t/**\n\t\t * @type {Object}\n\t\t */\n\t\tthis.location =\n\t\t\tnode && node.loc\n\t\t\t\t? node.loc\n\t\t\t\t: {\n\t\t\t\t\t\tstart: {line: 0, column: 0},\n\t\t\t\t\t\tend: {line: 0, column: 0}\n\t\t\t\t\t};\n\n\t\tif (arguments.length > 2 && arguments[2] instanceof Error) {\n\t\t\tthis.wrap(arguments[2]);\n\t\t}\n\t}\n\t/**\n\t * @desc Determines if the compilation failure was due to an error during\n\t * parsing. Sets location info from inner error if so.\n\t * @param {Object} inner Error from esprima.\n\t * @since 0.1.0\n\t */\n\twrap(inner) {\n\t\tlet isParserError = 'index' in inner && 'lineNumber' in inner;\n\n\t\tif (isParserError) {\n\t\t\tthis.location.end.column = -1;\n\t\t\tthis.location.end.line = -1;\n\t\t\tthis.location.start.column = inner.index;\n\t\t\tthis.location.start.line = inner.lineNumber;\n\t\t}\n\t}\n}\n\nmodule.exports = CompilerError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/CompilerError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "CompilerError",
    "memberof": "src/classes/CompilerError.js",
    "static": true,
    "longname": "src/classes/CompilerError.js~CompilerError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/CompilerError.js",
    "importStyle": null,
    "description": "Error used by compiler",
    "lineNumber": 8,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/CompilerError.js~CompilerError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/CompilerError.js~CompilerError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message used in error"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "(Optional) node from esprima tree used to\ndefine location information."
      }
    ]
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/CompilerError.js~CompilerError",
    "static": false,
    "longname": "src/classes/CompilerError.js~CompilerError#name",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "location",
    "memberof": "src/classes/CompilerError.js~CompilerError",
    "static": false,
    "longname": "src/classes/CompilerError.js~CompilerError#location",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "wrap",
    "memberof": "src/classes/CompilerError.js~CompilerError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/CompilerError.js~CompilerError#wrap",
    "access": "public",
    "description": "Determines if the compilation failure was due to an error during\nparsing. Sets location info from inner error if so.",
    "lineNumber": 45,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "inner",
        "description": "Error from esprima."
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/classes/HttpError.js",
    "content": "'use strict';\n\n/**\n * @ignore\n */\nconst CompilerError = require('./CompilerError');\n\n/**\n * @desc Normalised HTTP error class used prior to sending response.\n * @extends {Error}\n * @since 0.1.0\n */\nclass HttpError extends Error {\n\t/**\n\t * @param {Error} inner Inner error specific to service (eg. \n\t * `ValidateError`).\n\t * @param {string} errorType Type of error (eg. `'NAME_NOT_ALLOWED'`).\n\t * @param {number} status Status code.\n\t * @since 0.1.0\n\t */\n\tconstructor(inner, errorType, status) {\n\t\tsuper(inner.message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\t\t/**\n\t\t * @type {Error}\n\t\t */\n\t\tthis.inner = inner;\n\n\t\t/* istanbul ignore else */\n\t\tif (errorType && status) {\n\t\t\t/**\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.errorType = errorType;\n\t\t\t/**\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.status = status;\n\t\t} else {\n\t\t\tthis.serverError();\n\t\t}\n\n\t\tthis.defineBody();\n\t}\n\t/**\n\t * @desc Composes a body for the HTTP response to be sent.  If the inner\n\t * error was a `CompilerError`, it adds additional `compiled` and `location`\n\t * fields to the body.  In all cases, `error_type` and `message` are taken\n\t * from the current `HttpError` instance.\n\t * @since 0.1.0\n\t */\n\tdefineBody() {\n\t\t/**\n\t\t * @type {Object}\n\t\t */\n\t\tthis.body = {};\n\t\tthis.body.error_type = this.errorType;\n\t\tthis.body.message = this.message;\n\n\t\tif (this.inner instanceof CompilerError) {\n\t\t\tthis.body.compiled = false;\n\t\t\tthis.body.location = this.inner.location;\n\t\t}\n\t}\n\t/**\n\t * @desc Overrides class instance variables to reflect internal server\n\t * error.\n\t * @since 0.1.0\n\t */\n\t/* istanbul ignore next */\n\tserverError() {\n\t\tthis.errorType = 'INTERNAL_SERVER_ERROR';\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.message = 'An unknown exception occurred.';\n\t\tthis.status = 500;\n\t}\n\t/**\n\t * @desc Sets `res.statusCode` with current instance `status` and sends a\n\t * json response with the current instance `body`.\n\t * @param {Object} res Express response object.\n\t */\n\tsendError(res) {\n\t\tres.statusCode = this.status;\n\t\tres.json(this.body);\n\t}\n}\n\nmodule.exports = HttpError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/HttpError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "CompilerError",
    "memberof": "src/classes/HttpError.js",
    "static": true,
    "longname": "src/classes/HttpError.js~CompilerError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/HttpError.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "HttpError",
    "memberof": "src/classes/HttpError.js",
    "static": true,
    "longname": "src/classes/HttpError.js~HttpError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/HttpError.js",
    "importStyle": null,
    "description": "Normalised HTTP error class used prior to sending response.",
    "lineNumber": 13,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/HttpError.js~HttpError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "inner",
        "description": "Inner error specific to service (eg. \n`ValidateError`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errorType",
        "description": "Type of error (eg. `'NAME_NOT_ALLOWED'`)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "Status code."
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/HttpError.js~HttpError",
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#name",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "inner",
    "memberof": "src/classes/HttpError.js~HttpError",
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#inner",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "errorType",
    "memberof": "src/classes/HttpError.js~HttpError",
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#errorType",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "status",
    "memberof": "src/classes/HttpError.js~HttpError",
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#status",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "defineBody",
    "memberof": "src/classes/HttpError.js~HttpError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#defineBody",
    "access": "public",
    "description": "Composes a body for the HTTP response to be sent.  If the inner\nerror was a `CompilerError`, it adds additional `compiled` and `location`\nfields to the body.  In all cases, `error_type` and `message` are taken\nfrom the current `HttpError` instance.",
    "lineNumber": 56,
    "since": "0.1.0",
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "body",
    "memberof": "src/classes/HttpError.js~HttpError",
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#body",
    "access": "public",
    "description": "",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "serverError",
    "memberof": "src/classes/HttpError.js~HttpError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#serverError",
    "access": "public",
    "description": "Overrides class instance variables to reflect internal server\nerror.",
    "lineNumber": 75,
    "since": "0.1.0",
    "params": [],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "message",
    "memberof": "src/classes/HttpError.js~HttpError",
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#message",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "sendError",
    "memberof": "src/classes/HttpError.js~HttpError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/HttpError.js~HttpError#sendError",
    "access": "public",
    "description": "Sets `res.statusCode` with current instance `status` and sends a\njson response with the current instance `body`.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/classes/ListError.js",
    "content": "'use strict';\n\n/**\n * @desc Error used by list router\n * @extends {Error}\n * @since 0.1.0\n */\nclass ListError extends Error {\n\t/**\n\t * @desc Calls parent constructor, resets name, adds errorType, and captures\n\t * stack trace.\n\t * @param {string} message Error message\n\t * @param {string} errorType Error type\n\t * @since 0.1.0\n\t */\n\tconstructor(message, errorType) {\n\t\tsuper(message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.errorType = errorType;\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = ListError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/ListError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "ListError",
    "memberof": "src/classes/ListError.js",
    "static": true,
    "longname": "src/classes/ListError.js~ListError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/ListError.js",
    "importStyle": null,
    "description": "Error used by list router",
    "lineNumber": 8,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/ListError.js~ListError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/ListError.js~ListError#constructor",
    "access": "public",
    "description": "Calls parent constructor, resets name, adds errorType, and captures\nstack trace.",
    "lineNumber": 16,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errorType",
        "description": "Error type"
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "errorType",
    "memberof": "src/classes/ListError.js~ListError",
    "static": false,
    "longname": "src/classes/ListError.js~ListError#errorType",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/ListError.js~ListError",
    "static": false,
    "longname": "src/classes/ListError.js~ListError#name",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/classes/PublishError.js",
    "content": "'use strict';\n\n/**\n * @desc Error used by publisher router\n * @extends {Error}\n * @since 0.1.0\n */\nclass PublishError extends Error {\n\t/**\n\t * @desc Calls parent constructor, resets name, adds errorType, and captures\n\t * stack trace.\n\t * @param {string} message Error message\n\t * @param {string} errorType Error type\n\t * @since 0.1.0\n\t */\n\tconstructor(message, errorType) {\n\t\tsuper(message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.errorType = errorType;\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = PublishError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/PublishError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "PublishError",
    "memberof": "src/classes/PublishError.js",
    "static": true,
    "longname": "src/classes/PublishError.js~PublishError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/PublishError.js",
    "importStyle": null,
    "description": "Error used by publisher router",
    "lineNumber": 8,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/PublishError.js~PublishError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/PublishError.js~PublishError#constructor",
    "access": "public",
    "description": "Calls parent constructor, resets name, adds errorType, and captures\nstack trace.",
    "lineNumber": 16,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errorType",
        "description": "Error type"
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "errorType",
    "memberof": "src/classes/PublishError.js~PublishError",
    "static": false,
    "longname": "src/classes/PublishError.js~PublishError#errorType",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/PublishError.js~PublishError",
    "static": false,
    "longname": "src/classes/PublishError.js~PublishError#name",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/classes/RecordError.js",
    "content": "'use strict';\n\n/**\n * @desc Error used by record router\n * @extends {Error}\n * @since 0.1.0\n */\nclass RecordError extends Error {\n\t/**\n\t * @desc Calls parent constructor, resets name, adds errorType, and captures\n\t * stack trace.\n\t * @param {string} message Error message\n\t * @param {string} errorType Error type\n\t * @since 0.1.0\n\t */\n\tconstructor(message, errorType) {\n\t\tsuper(message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.errorType = errorType;\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = RecordError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/RecordError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "RecordError",
    "memberof": "src/classes/RecordError.js",
    "static": true,
    "longname": "src/classes/RecordError.js~RecordError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/RecordError.js",
    "importStyle": null,
    "description": "Error used by record router",
    "lineNumber": 8,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/RecordError.js~RecordError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/RecordError.js~RecordError#constructor",
    "access": "public",
    "description": "Calls parent constructor, resets name, adds errorType, and captures\nstack trace.",
    "lineNumber": 16,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errorType",
        "description": "Error type"
      }
    ]
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "errorType",
    "memberof": "src/classes/RecordError.js~RecordError",
    "static": false,
    "longname": "src/classes/RecordError.js~RecordError#errorType",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/RecordError.js~RecordError",
    "static": false,
    "longname": "src/classes/RecordError.js~RecordError#name",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/classes/UnpublishError.js",
    "content": "'use strict';\n\n/**\n * @desc Error used by unpublish router\n * @extends {Error}\n * @since 0.1.0\n */\nclass UnpublishError extends Error {\n\t/**\n\t * @desc Calls parent constructor, resets name, adds errorType, and captures\n\t * stack trace.\n\t * @param {string} message Error message\n\t * @param {string} errorType Error type\n\t * @since 0.1.0\n\t */\n\tconstructor(message, errorType) {\n\t\tsuper(message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.errorType = errorType;\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = UnpublishError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/UnpublishError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "UnpublishError",
    "memberof": "src/classes/UnpublishError.js",
    "static": true,
    "longname": "src/classes/UnpublishError.js~UnpublishError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/UnpublishError.js",
    "importStyle": null,
    "description": "Error used by unpublish router",
    "lineNumber": 8,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/UnpublishError.js~UnpublishError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/UnpublishError.js~UnpublishError#constructor",
    "access": "public",
    "description": "Calls parent constructor, resets name, adds errorType, and captures\nstack trace.",
    "lineNumber": 16,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errorType",
        "description": "Error type"
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "errorType",
    "memberof": "src/classes/UnpublishError.js~UnpublishError",
    "static": false,
    "longname": "src/classes/UnpublishError.js~UnpublishError#errorType",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/UnpublishError.js~UnpublishError",
    "static": false,
    "longname": "src/classes/UnpublishError.js~UnpublishError#name",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/classes/ValidateError.js",
    "content": "'use strict';\n\n/**\n * @desc Error used by validate router\n * @extends {Error}\n * @since 0.1.0\n */\nclass ValidateError extends Error {\n\t/**\n\t * @desc Calls parent constructor, resets name, adds errorType, and captures\n\t * stack trace.\n\t * @param {string} message Error message\n\t * @param {string} errorType Error type\n\t * @since 0.1.0\n\t */\n\tconstructor(message, errorType) {\n\t\tsuper(message);\n\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.errorType = errorType;\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = this.constructor.name;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = ValidateError;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/classes/ValidateError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "ValidateError",
    "memberof": "src/classes/ValidateError.js",
    "static": true,
    "longname": "src/classes/ValidateError.js~ValidateError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/classes/ValidateError.js",
    "importStyle": null,
    "description": "Error used by validate router",
    "lineNumber": 8,
    "since": "0.1.0",
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/classes/ValidateError.js~ValidateError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/classes/ValidateError.js~ValidateError#constructor",
    "access": "public",
    "description": "Calls parent constructor, resets name, adds errorType, and captures\nstack trace.",
    "lineNumber": 16,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errorType",
        "description": "Error type"
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "errorType",
    "memberof": "src/classes/ValidateError.js~ValidateError",
    "static": false,
    "longname": "src/classes/ValidateError.js~ValidateError#errorType",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "name",
    "memberof": "src/classes/ValidateError.js~ValidateError",
    "static": false,
    "longname": "src/classes/ValidateError.js~ValidateError#name",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/code/list.js",
    "content": "/**\n * @desc Exports a router for `/code/`, the service to obtain a list of code\n * resources\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst CeallogFunction = require('../models/CeallogFunction'),\n\tHttpError = require('../classes/HttpError'),\n\tListError = require('../classes/ListError');\n\n/**\n * @desc An object acting like a map where key represents the type of message\n * and the value is a string with the message itself.\n * @since 0.1.0\n */\nconst messages = {\n\tMISSING_NAME_PARAMETER:\n\t\t'`name` parameter must be included when querying unpublished resources.'\n};\n\n/**\n * @desc Used to format mongoose responses prior to sending json response.\n * @param {Object} response mongoose resonse to be formatted.\n * @since 0.1.0\n */\nconst formatter = response => {\n\tresponse.id = response._id;\n\tdelete response.__v;\n\tdelete response._id;\n};\n\n/**\n * @desc Queries code based on query string parameters provided.  If none\n * are provided, the latest results for each ceallog function name is sent.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst query = (req, res, next) => {\n\tlet name = req.query.name;\n\tlet published = req.query.published;\n\tlet callback = (err, response) => {\n\t\t/* istanbul ignore if */\n\t\tif(err) {\n\t\t\ttry {\n\t\t\t\tthrow new ListError(err.name, 'INTERNAL_SERVER_ERROR');\n\t\t\t} catch(e) {\n\t\t\t\tnew HttpError(e).send(res);\n\t\t\t} finally {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(response instanceof Array) {\n\t\t\tresponse.forEach(formatter);\n\t\t}\n\t\t\n\t\tres.json(response);\n\t};\n\n\tif (published != null || name != null) {\n\t\tlet query;\n\n\t\tif (published == '0') {\n\t\t\tif (!name) {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new ListError(\n\t\t\t\t\t\tmessages.MISSING_NAME_PARAMETER,\n\t\t\t\t\t\t'MISSING_NAME_PARAMETER'\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tnew HttpError(e, e.errorType, 400).sendError(res);\n\t\t\t\t} finally {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tquery = {$and: [{published: false}, {name: name}]};\n\t\t} else if (name != null) {\n\t\t\tquery = {name: name};\n\t\t} else {\n\t\t\tquery = {published: true};\n\t\t}\n\n\t\treturn CeallogFunction.find(query, callback);\n\t} else {\n\t\t// Query latest\n\t\tlet query = [\n\t\t\t{ $sort: { created_date: -1 } },\n\t\t\t{ $group: {\n\t\t\t    _id: \"$name\",\n\t\t\t    ceallogaFunctions: { $push: \"$$ROOT\" }\n\t\t\t}},\n\t\t\t{ $replaceRoot: {\n\t\t\t    newRoot: { $arrayElemAt: [\"$ceallogaFunctions\", 0] }\n\t\t\t}}\n\t\t];\n\t\t\n\t\tCeallogFunction.aggregate(query, callback);\n\t}\n};\n\nmodule.exports = [query];\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/code/list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "CeallogFunction",
    "memberof": "src/code/list.js",
    "static": true,
    "longname": "src/code/list.js~CeallogFunction",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/list.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "messages",
    "memberof": "src/code/list.js",
    "static": true,
    "longname": "src/code/list.js~messages",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/list.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of message\nand the value is a string with the message itself.",
    "lineNumber": 20,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"MISSING_NAME_PARAMETER\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "formatter",
    "memberof": "src/code/list.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/list.js~formatter",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/list.js",
    "importStyle": null,
    "description": "Used to format mongoose responses prior to sending json response.",
    "lineNumber": 30,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "mongoose resonse to be formatted."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "query",
    "memberof": "src/code/list.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/list.js~query",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/list.js",
    "importStyle": null,
    "description": "Queries code based on query string parameters provided.  If none\nare provided, the latest results for each ceallog function name is sent.",
    "lineNumber": 44,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/code/publish.js",
    "content": "/**\n * @desc Exports a router for `/code/publish/:id`, the service to publish the\n * code of a specified id.\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst CeallogFunction = require('../models/CeallogFunction'),\n\tcompileRequest = require('../compiler').compileRequest,\n\tHttpError = require('../classes/HttpError'),\n\tPublishError = require('../classes/PublishError'),\n\tsettings = require('../settings'),\n\tutil = require('../mongoose-util');\n\n/**\n * @desc An object acting like a map where key represents the type of message\n * and the value is a string with the message itself.\n * @since 0.1.0\n */\nconst messages = {\n\tMISSING_PARAMS: 'Required parameters missing.',\n\tNON_EXISTING_RESOURCE: 'Resource does not exist.'\n};\n\n/**\n * @desc Attempts to find the existing published resource by the id provided. If\n * successful, the result is added to `req.publisher.newRecord`.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst findNew = (req, res, next) => {\n\tlet err;\n\n\t/* istanbul ignore else */\n\tif ('id' in req.params) {\n\t\tlet id = util.getObjectId(req.params.id);\n\n\t\treq.publisher = req.publisher || {oldRecord: null, newRecord: null};\n\n\t\tCeallogFunction.findOne({_id: id}, (err, result) => {\n\t\t\tlet dbResult = util.dbResultCallback(req.publisher)(err, result);\n\n\t\t\tif (dbResult.type == 'SUCCESS' && result) {\n\t\t\t\treq.publisher.newRecord = result;\n\t\t\t\treq.code = result.body;\n\n\t\t\t\tnext();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new PublishError(\n\t\t\t\t\t\tmessages.NON_EXISTING_RESOURCE,\n\t\t\t\t\t\t'NON_EXISTING_RESOURCE'\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\terr = new HttpError(e, e.errorType, 404);\n\t\t\t\t\terr.sendError(res);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\ttry {\n\t\t\tthrow new PublishError(messages.MISSING_PARAMS, 'MISSING_PARAMS');\n\t\t} catch (e) {\n\t\t\terr = new HttpError(e, e.errorType, 400);\n\t\t\terr.sendError(res);\n\t\t}\n\t}\n};\n\n/**\n * @desc Attempts to find the existing published resource by the name of the new\n * record.  If successful, the result is added to `req.publisher.oldRecord`.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst findOld = (req, res, next) => {\n\tlet publisher = req.publisher;\n\tlet newRecord = publisher.newRecord;\n\tlet name = newRecord ? newRecord.name : null;\n\n\tif (name) {\n\t\tlet query = {\n\t\t\t$and: [{name: {$eq: name}}, {published: {$eq: true}}]\n\t\t};\n\n\t\tif (newRecord && newRecord._id) {\n\t\t\tquery.$and.push({_id: {$ne: newRecord._id}});\n\t\t}\n\n\n\t\tCeallogFunction.findOne(query, (err, result) => {\n\t\t\tlet dbResult = util.dbResultCallback(req.publisher)(err, result);\n\n\t\t\tif (dbResult.type == 'SUCCESS') {\n\t\t\t\treq.publisher.oldRecord = result;\n\t\t\t}\n\n\t\t\tnext();\n\t\t});\n\t}\n};\n\n/**\n * @desc Compiles the new code before proceeding.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst handleCompilerResult = (req, res, next) => {\n\tlet err;\n\n\ttry {\n\t\tif (req.compiler.error) {\n\t\t\tthrow new HttpError(req.compiler.error, 'COMPILATION_ERROR', 400);\n\t\t}\n\t} catch (e) {\n\t\terr = e;\n\t} finally {\n\t\tif (err) {\n\t\t\tlet newRecord = req.publisher.newRecord || {};\n\t\t\tlet id = newRecord._id;\n\n\t\t\terr.sendError(res);\n\n\t\t\tif (id) {\n\t\t\t\tCeallogFunction.update({_id: id}, {compiled: false, published: false});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\tnext();\n\t}\n};\n\n/**\n * @desc Updates the old record `published` field to `false` and the new record\n * `published` field to `true`.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst update = (req, res, next) => {\n\tlet newRecord = req.publisher.newRecord;\n\tlet oldRecord = req.publisher.oldRecord;\n\n\tnew Promise((resolve, reject) => {\n\t\tif (oldRecord) {\n\t\t\treturn CeallogFunction.update(\n\t\t\t\t{_id: oldRecord._id},\n\t\t\t\t{published: false},\n\t\t\t\t(err, _) => {\n\t\t\t\t\tif (err) return reject(err);\n\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tresolve();\n\t})\n\t\t.then(_ => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tCeallogFunction.update(\n\t\t\t\t\t{_id: newRecord._id},\n\t\t\t\t\t{published: true},\n\t\t\t\t\t(err, _) => {\n\t\t\t\t\t\tif (err) return reject(err);\n\n\t\t\t\t\t\tresolve(newRecord);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t})\n\t\t.then(r => {\n\t\t\tlet response = {\n\t\t\t\tcompiled: r.compiled,\n\t\t\t\tcreated_date: r.created_date,\n\t\t\t\tid: r._id,\n\t\t\t\tlabel: r.label,\n\t\t\t\tname: r.name,\n\t\t\t\tpublished: true,\n\t\t\t\tservice: `/${settings.cealloga.api_path}/${r.name}`\n\t\t\t};\n\n\t\t\tres.statusCode = 200;\n\t\t\tres.json(response);\n\t\t})\n\t\t.catch(err => {\n\t\t\t/* istanbul ignore next */\n\t\t\tlet dbResult = util.dbResultCallback(req.publisher)(err, null);\n\t\t\t\n\t\t\t/* istanbul ignore next */\n\t\t\ttry {\n\t\t\t\tthrow new PublishError(dbResult.type, dbResult.message);\n\t\t\t} catch (e) {\n\t\t\t\tnew HttpError(e).sendError(res);\n\t\t\t}\n\t\t});\n};\n\nmodule.exports = [\n\tfindNew,\n\tcompileRequest,\n\thandleCompilerResult,\n\tfindOld,\n\tupdate\n];\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/code/publish.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "CeallogFunction",
    "memberof": "src/code/publish.js",
    "static": true,
    "longname": "src/code/publish.js~CeallogFunction",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/publish.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "messages",
    "memberof": "src/code/publish.js",
    "static": true,
    "longname": "src/code/publish.js~messages",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/publish.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of message\nand the value is a string with the message itself.",
    "lineNumber": 23,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"MISSING_PARAMS\": string, \"NON_EXISTING_RESOURCE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "findNew",
    "memberof": "src/code/publish.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/publish.js~findNew",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/publish.js",
    "importStyle": null,
    "description": "Attempts to find the existing published resource by the id provided. If\nsuccessful, the result is added to `req.publisher.newRecord`.",
    "lineNumber": 36,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "findOld",
    "memberof": "src/code/publish.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/publish.js~findOld",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/publish.js",
    "importStyle": null,
    "description": "Attempts to find the existing published resource by the name of the new\nrecord.  If successful, the result is added to `req.publisher.oldRecord`.",
    "lineNumber": 83,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "handleCompilerResult",
    "memberof": "src/code/publish.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/publish.js~handleCompilerResult",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/publish.js",
    "importStyle": null,
    "description": "Compiles the new code before proceeding.",
    "lineNumber": 117,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "update",
    "memberof": "src/code/publish.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/publish.js~update",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/publish.js",
    "importStyle": null,
    "description": "Updates the old record `published` field to `false` and the new record\n`published` field to `true`.",
    "lineNumber": 151,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/code/record.js",
    "content": "/**\n * @desc Exports a router for `/code/:id`, the service to obtain a single code\n * resource\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst CeallogFunction = require('../models/CeallogFunction'),\n\tHttpError = require('../classes/HttpError'),\n\tRecordError = require('../classes/RecordError'),\n\tsettings = require('../settings');\n\n/**\n * @desc An object acting like a map where key represents the type of message\n * and the value is a string with the message itself.\n * @since 0.1.0\n */\nconst messages = {\n\tMISSING_PARAMS: 'Required parameters missing.',\n\tNON_EXISTING_RESOURCE: 'Resource does not exist.'\n};\n\n/**\n * @desc Attempts to find one ceallog function resource in mongodb with an\n * id contained in `req.params.id`.  Sends the result via `res`.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nmodule.exports = (req, res, next) => {\n\tlet id = req.params.id;\n\n\t/* istanbul ignore else */\n\tif (id) {\n\t\tCeallogFunction.findOne({_id: id}, (err, result) => {\n\t\t\tif (err) {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new RecordError(\n\t\t\t\t\t\tmessages.NON_EXISTING_RESOURCE,\n\t\t\t\t\t\t'NON_EXISTING_RESOURCE'\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tnew HttpError(e, e.errorType, 404).sendError(res);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet service = result.published\n\t\t\t\t\t? `/${settings.cealloga.api_path}/${result.name}`\n\t\t\t\t\t: `/${settings.cealloga.api_path}/${settings.cealloga.test_path}/${\n\t\t\t\t\t\t\tresult._id\n\t\t\t\t\t\t}`;\n\n\t\t\t\tres.statusCode = 200;\n\t\t\t\tres.json({\n\t\t\t\t\tid: result._id,\n\t\t\t\t\tcompiled: result.compiled,\n\t\t\t\t\tlabel: result.label,\n\t\t\t\t\tname: result.name,\n\t\t\t\t\tpublished: result.published,\n\t\t\t\t\tservice: service\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} else {\n\t\ttry {\n\t\t\tthrow new RecordError(messages.MISSING_PARAMS, 'MISSING_PARAMS');\n\t\t} catch (e) {\n\t\t\tnew HttpError(e, e.errorType, 400).sendError(res);\n\t\t}\n\t}\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/code/record.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "CeallogFunction",
    "memberof": "src/code/record.js",
    "static": true,
    "longname": "src/code/record.js~CeallogFunction",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/record.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "messages",
    "memberof": "src/code/record.js",
    "static": true,
    "longname": "src/code/record.js~messages",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/record.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of message\nand the value is a string with the message itself.",
    "lineNumber": 21,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"MISSING_PARAMS\": string, \"NON_EXISTING_RESOURCE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/code/route.js",
    "content": "/**\n * @desc Exports middlewear for `/code/*`\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst express = require('express'), router = express.Router();\n\nrouter.get('/publish/:id', require('./publish'));\nrouter.get('/unpublish/:name', require('./unpublish'));\nrouter.post('/validate', require('./validate'));\nrouter.get('/:id', require('./record'));\nrouter.get('/', require('./list'));\n\nmodule.exports = router;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/code/route.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "express",
    "memberof": "src/code/route.js",
    "static": true,
    "longname": "src/code/route.js~express",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/route.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/code/unpublish.js",
    "content": "/**\n * @desc Exports a router for `/code/unpublish/:name`, the service to unpublish\n * the code of a specified name.\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst CeallogFunction = require('../models/CeallogFunction'),\n\tdbResultCallback = require('../mongoose-util').dbResultCallback,\n\tHttpError = require('../classes/HttpError'),\n\tsettings = require('../settings'),\n\tUnpublishError = require('../classes/UnpublishError');\n\n/**\n * @desc An object acting like a map where key represents the type of message\n * and the value is a string with the message itself.\n * @since 0.1.0\n */\nconst messages = {\n\tMISSING_PARAMS: 'Required parameters missing.',\n\tNON_EXISTING_RESOURCE: 'Resource does not exist.',\n\tUNKNOWN_UPDATE_ERROR: 'Unknown update error.'\n};\n\n/**\n * @desc Attempts to find the existing published resource by the name provided.\n * If successful, the result is added to `req.unpublisher.result`.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst findPublished = (req, res, next) => {\n\tlet err;\n\n\t/* istanbul ignore else */\n\tif ('name' in req.params) {\n\t\tlet name = req.params.name;\n\t\tlet query = {\n\t\t\t$and: [{name: name}, {published: true}]\n\t\t};\n\t\t\n\t\treq.unpublisher = req.unpublisher || {record: null};\n\n\t\tCeallogFunction.findOne(query, (err, result) => {\n\t\t\tlet dbResult = dbResultCallback(req.unpublisher)(err, result);\n\n\t\t\tif (dbResult.type == 'SUCCESS' && result) {\n\t\t\t\treq.unpublisher.record = result;\n\n\t\t\t\tnext();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new UnpublishError(\n\t\t\t\t\t\tmessages.NON_EXISTING_RESOURCE,\n\t\t\t\t\t\t'NON_EXISTING_RESOURCE'\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\terr = new HttpError(e, e.errorType, 404);\n\t\t\t\t\terr.sendError(res);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\ttry {\n\t\t\tthrow new UnpublishError(messages.MISSING_PARAMS, 'MISSING_PARAMS');\n\t\t} catch (e) {\n\t\t\terr = new HttpError(e, e.errorType, 400);\n\t\t\terr.sendError(res);\n\t\t}\n\t}\n};\n\n/**\n * @desc Attempts to change published to false and update\n * `req.unpublisher.record`.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst update = (req, res, next) => {\n\tlet record = req.unpublisher.record;\n\n\t/* istanbul ignore else */\n\tif (record) {\n\t\tCeallogFunction.update(\n\t\t\t{_id: record._id},\n\t\t\t{published: false},\n\t\t\t(err, result) => {\n\t\t\t\tlet dbResult = dbResultCallback(req.unpublisher)(err, result);\n\t\t\t\tlet innerErr;\n\n\t\t\t\tswitch (dbResult.type) {\n\t\t\t\t\tcase 'UPDATE_RESULT':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tcase 'UPDATE_ERROR':\n\t\t\t\t\t\tinnerErr = new UnpublishError(dbResult.message, 'UPDATE_ERROR');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tcase 'VALIDATION_ERROR':\n\t\t\t\t\t\tinnerErr = new UnpublishError(dbResult.message, 'VALIDATION_ERROR');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tinnerErr = new UnpublishError(\n\t\t\t\t\t\t\tdbResult.message,\n\t\t\t\t\t\t\t'INTERNAL_SERVER_ERROR'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (innerErr != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthrow innerErr;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tnew HttpError(e, e.errorType, dbResult.statusCode).sendError(res);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres.statusCode = 200;\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tcompiled: record.compiled,\n\t\t\t\t\t\tid: record.id,\n\t\t\t\t\t\tlabel: record.label,\n\t\t\t\t\t\tname: record.name,\n\t\t\t\t\t\tpublished: false,\n\t\t\t\t\t\tservice: `/${settings.cealloga.api_path}/${\n\t\t\t\t\t\t\tsettings.cealloga.test_path\n\t\t\t\t\t\t}/${record._id}`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t} else {\n\t\ttry {\n\t\t\tthrow new UnpublishError(\n\t\t\t\t'UNKNOWN_UPDATE_ERROR',\n\t\t\t\tmessages.UNKNOWN_UPDATE_ERROR\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tnew HttpError(e).sendError(res);\n\t\t}\n\t}\n};\n\nmodule.exports = [findPublished, update];\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/code/unpublish.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "CeallogFunction",
    "memberof": "src/code/unpublish.js",
    "static": true,
    "longname": "src/code/unpublish.js~CeallogFunction",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/unpublish.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "messages",
    "memberof": "src/code/unpublish.js",
    "static": true,
    "longname": "src/code/unpublish.js~messages",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/unpublish.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of message\nand the value is a string with the message itself.",
    "lineNumber": 22,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"MISSING_PARAMS\": string, \"NON_EXISTING_RESOURCE\": string, \"UNKNOWN_UPDATE_ERROR\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "findPublished",
    "memberof": "src/code/unpublish.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/unpublish.js~findPublished",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/unpublish.js",
    "importStyle": null,
    "description": "Attempts to find the existing published resource by the name provided.\nIf successful, the result is added to `req.unpublisher.result`.",
    "lineNumber": 36,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "update",
    "memberof": "src/code/unpublish.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/unpublish.js~update",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/unpublish.js",
    "importStyle": null,
    "description": "Attempts to change published to false and update\n`req.unpublisher.record`.",
    "lineNumber": 85,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/code/validate.js",
    "content": "/**\n * @desc Exports a router for `/code/validate/` used to validate, compile, and\n * create code records in database.\n * @since 0.1.0\n */\n'use strict';\n\n// Requirements\n/**\n * @ignore\n */\nconst CeallogFunction = require('../models/CeallogFunction'),\n\tcompileRequest = require('../compiler').compileRequest,\n\tdbResultCallback = require('../mongoose-util').dbResultCallback,\n\tHttpError = require('../classes/HttpError'),\n\tsettings = require('../settings'),\n\turiBlacklist = require('../uri-blacklist'),\n\tValidateError = require('../classes/ValidateError');\n\n// Constants\n/**\n * @desc An object acting like a map where key represents the type of message\n * and the value is a string with the message itself.\n * @since 0.1.0\n */\nconst messages = {\n\tNAME_NOT_ALLOWED: '`name` value cannot be used. Please choose another.',\n\tNO_BODY: 'Required `body` field missing.',\n\tNO_LABEL: 'Required `label` field missing.',\n\tNO_NAME: 'Required `name` field missing.',\n\tINVALID_NAME: '`name` invalid: must be an allowed URL segment.',\n\tUNEXPECTED_DB_RESULT: 'Unexpected database result.'\n};\n\n// Functions\n/**\n * @desc Checks `req.body` to make sure it contains `body`, `name`, and `label`\n * fields. If not, an error is sent via `res`. If so, the next function is\n * called.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst handleBody = (req, res, next) => {\n\tlet body = req.body;\n\n\t/* istanbul ignore else */\n\tif (body) {\n\t\t// If a body exists, check there is a `body`, `name`, and `label`. If\n\t\t// any values are missing, throw an error and respond with a 400.\n\t\t// Otherwise, assign `body` to `req.code` for use by the compiler.\n\t\ttry {\n\t\t\tif (!body.body) {\n\t\t\t\tthrow new ValidateError(messages.NO_BODY, 'NO_BODY');\n\t\t\t} else if (!body.name) {\n\t\t\t\tthrow new ValidateError(messages.NO_NAME, 'NO_NAME');\n\t\t\t} else if (!body.label) {\n\t\t\t\tthrow new ValidateError(messages.NO_LABEL, 'NO_LABEL');\n\t\t\t} else {\n\t\t\t\treq.code = body.body;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn new HttpError(e, e.errorType, 400).sendError(res);\n\t\t}\n\n\t\treturn next();\n\t} else {\n\t\t// If a body is missing somehow, throw a generic error, log it, swallow\n\t\t// it, and respond with a 500.\n\t\ttry {\n\t\t\tthrow new Error('Missing request body.');\n\t\t} catch (e) {\n\t\t\treturn new HttpError(e).sendError(res);\n\t\t} finally {\n\t\t\treturn;\n\t\t}\n\t}\n};\n\n/**\n * @desc Proceeds to next function if no compiler error occured. If an error did\n * occur, it is normalised as an `HttpError`, including location information if\n * available, then sent with a 400 status code.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst handleCompilerResult = (req, res, next) => {\n\tlet err;\n\n\ttry {\n\t\tif (req.compiler.error) {\n\t\t\tthrow new HttpError(req.compiler.error, 'COMPILATION_ERROR', 400);\n\t\t}\n\t} catch (e) {\n\t\terr = e;\n\t} finally {\n\t\tif (err) {\n\t\t\terr.sendError(res);\n\t\t\treturn;\n\t\t}\n\t\tnext();\n\t}\n};\n\n/**\n * @desc Saves code resource to mongodb.  Sends 201 response if successful,\n * error response otherwise.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst save = (req, res, next) => {\n\tlet resource = {\n\t\tbody: req.code,\n\t\tcompiled: typeof req.compiler.compiled == 'function',\n\t\tlabel: req.body.label,\n\t\tname: req.body.name\n\t};\n\n\tlet ceallogFunction = new CeallogFunction(resource);\n\n\tceallogFunction.save((err, results) => {\n\t\treq.validator = {};\n\n\t\tlet dbResult = dbResultCallback(req.validator)(err, results);\n\n\t\t/* istanbul ignore if */\n\t\tif (err) {\n\t\t\ttry {\n\t\t\t\tthrow new ValidateError(dbResult.message, dbResult.type);\n\t\t\t} catch (e) {\n\t\t\t\treturn new HttpError(e, dbResult.type, dbResult.statusCode).sendError(\n\t\t\t\t\tres\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tlet response = {\n\t\t\t\tcompiled: true,\n\t\t\t\tid: results._id,\n\t\t\t\tmessage: dbResult.message,\n\t\t\t\tpublished: false,\n\t\t\t\tservice: `/${settings.cealloga.api_path}/${\n\t\t\t\t\tsettings.cealloga.test_path\n\t\t\t\t}/${results._id}`\n\t\t\t};\n\n\t\t\tres.statusCode = 201;\n\t\t\tres.json(response);\n\t\t}\n\t});\n\n\treturn;\n};\n\n/**\n * @desc Checks whether `req.body.name` is in the URI blacklist and proceeds if\n * not. Sends a 400 response otherwise.\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst validateURIBlacklist = (req, res, next) => {\n\tlet name = req.body.name;\n\t\n\tif (!uriBlacklist.has(name)) {\n\t\treturn next();\n\t} else {\n\t\ttry {\n\t\t\tthrow new ValidateError(messages.NAME_NOT_ALLOWED, 'NAME_NOT_ALLOWED');\n\t\t} catch(e) {\n\t\t\tnew HttpError(e, e.errorType, 400).sendError(res);\n\t\t}\n\t\treturn;\n\t}\n};\n\n/**\n * @desc Determines whether `req.body.name` is a valid URI component.\n * This function is a limitted implementation of the rules for RFC-2396: URI \n * Generic Syntax (https://www.ietf.org/rfc/rfc2396.txt) as applied to relative\n * segment URI components (see section 5).\n * @param {Object} req Express request object\n * @param {Object} res Express response object\n * @param {function} next Function to be called by Express next.\n * @since 0.1.0\n */\nconst validateURIComponent = (req, res, next) => {\n\tlet name = req.body.name;\n\tlet reserved = /[;\\/\\?\\:@&=\\+\\$,]/g;\n\tlet reservedMatch = reserved.exec(name);\n\tlet relSegment = /[A-Za-z0-9-_\\.\\!~\\*'\\(\\)%]*/g;\n\tlet relSegmentMatch = relSegment.exec(name);\n\tlet isValidSegment = relSegmentMatch && relSegmentMatch.index == 0 \n\t\t&& relSegment.lastIndex == name.length;\n\t\n\tif (!reservedMatch && isValidSegment) {\n\t\treturn next();\n\t} else {\n\t\ttry {\n\t\t\tthrow new ValidateError(messages.INVALID_NAME, 'INVALID_NAME');\n\t\t} catch(e) {\n\t\t\tnew HttpError(e, e.errorType, 400).sendError(res);\n\t\t}\n\t\treturn;\n\t}\n\n};\n\nmodule.exports = [\n\thandleBody,\n\tvalidateURIComponent,\n\tvalidateURIBlacklist,\n\tcompileRequest,\n\thandleCompilerResult,\n\tsave\n];\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/code/validate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "CeallogFunction",
    "memberof": "src/code/validate.js",
    "static": true,
    "longname": "src/code/validate.js~CeallogFunction",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "messages",
    "memberof": "src/code/validate.js",
    "static": true,
    "longname": "src/code/validate.js~messages",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of message\nand the value is a string with the message itself.",
    "lineNumber": 26,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"NAME_NOT_ALLOWED\": string, \"NO_BODY\": string, \"NO_LABEL\": string, \"NO_NAME\": string, \"INVALID_NAME\": string, \"UNEXPECTED_DB_RESULT\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "handleBody",
    "memberof": "src/code/validate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/validate.js~handleBody",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "Checks `req.body` to make sure it contains `body`, `name`, and `label`\nfields. If not, an error is sent via `res`. If so, the next function is\ncalled.",
    "lineNumber": 45,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "handleCompilerResult",
    "memberof": "src/code/validate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/validate.js~handleCompilerResult",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "Proceeds to next function if no compiler error occured. If an error did\noccur, it is normalised as an `HttpError`, including location information if\navailable, then sent with a 400 status code.",
    "lineNumber": 90,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "save",
    "memberof": "src/code/validate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/validate.js~save",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "Saves code resource to mongodb.  Sends 201 response if successful,\nerror response otherwise.",
    "lineNumber": 116,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "validateURIBlacklist",
    "memberof": "src/code/validate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/validate.js~validateURIBlacklist",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "Checks whether `req.body.name` is in the URI blacklist and proceeds if\nnot. Sends a 400 response otherwise.",
    "lineNumber": 167,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "validateURIComponent",
    "memberof": "src/code/validate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/code/validate.js~validateURIComponent",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/code/validate.js",
    "importStyle": null,
    "description": "Determines whether `req.body.name` is a valid URI component.\nThis function is a limitted implementation of the rules for RFC-2396: URI \nGeneric Syntax (https://www.ietf.org/rfc/rfc2396.txt) as applied to relative\nsegment URI components (see section 5).",
    "lineNumber": 192,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Express request object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Express response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Function to be called by Express next."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/compiler.js",
    "content": "/**\n * @desc Compiler for most ceallog function api calls.\n * @since 0.1.0\n */\n'use strict';\n\n// Requirements\n/**\n * @ignore\n */\nconst CompilerError = require('./classes/CompilerError'),\n\tesprima = require('esprima'),\n\twalk = require('esprima-walk');\n\n// Constants\n/**\n * @desc An object acting like a map where key represents the type of message\n * and the value is a string with the message itself.\n * @since 0.1.0\n */\nconst messages = {\n\tILLEGAL_DIRNAME: 'Use of `__dirname` is illegal.',\n\tILLEGAL_FILENAME: 'Use of `__filename` is illegal.',\n\tILLEGAL_CLEARIMMEDIATE: 'Use of `clearImmediate()` is illegal.',\n\tILLEGAL_CLEARINTERVAL: 'Use of `clearInterval()` is illegal.',\n\tILLEGAL_CLEARTIMEOUT: 'Use of `clearTimeout()` is illegal.',\n\tILLEGAL_CONSOLE: 'Use of `console` is illegal.',\n\tILLEGAL_EXPORTS: 'Use of `exports` is illegal.',\n\tILLEGAL_EVAL: 'Use of `eval()` is illegal.',\n\tILLEGAL_GLOBAL: 'Use of `global` is illegal.',\n\tILLEGAL_MODULE: 'Use of `module` is illegal.',\n\tILLEGAL_PROCESS: 'Use of `process` is illegal.',\n\tILLEGAL_REQUIRE: 'Use of `require()` is illegal.',\n\tILLEGAL_SETIMMEDIATE: 'Use of `setImmediate()` is illegal.',\n\tILLEGAL_SETINTERVAL: 'Use of `setInterval()` is illegal.',\n\tILLEGAL_SETTIMEOUT: 'Use of `setTimeout()` is illegal.',\n\tILLEGAL_THIS: 'Use of `this` keyword is illegal.',\n\tMULTIPLE_TOP_LEVEL_STATEMENTS:\n\t\t'Only one top-level statement permitted, and it must be an arrow function expression (eg. \"() => { return \\'Hello world\\'; }\").',\n\tNOT_A_FUNCTION: 'Statement is not a function.',\n\tNOT_AN_ARROW_FUNCTION:\n\t\t'Top level statement must be an arrow function (eg. \"() => { return \\'Hello world\\'; }\").',\n\tPARSER_FAILURE: 'Failed to parse statement.'\n};\n\n// Functions\n/**\n * @param {string} code Code to compile.\n * @return {function} A closure function that takes a `Ceallog` instance as a\n * param. When this function is executed, it applies a `null` scope to the\n * compiled function and passes the `Ceallog` instance as its sole argument.\n * @since 0.1.0\n */\nconst compile = code => {\n\tlet compiled = require('./safe-eval')(code);\n\n\t/* istanbul ignore if */\n\tif (typeof compiled != 'function') { // Unreachable...\n\t\tthrow new Error(messages.NOT_A_FUNCTION);\n\t}\n\n\tlet closure = function(ceallog) {\n\t\treturn compiled.apply(null, [ceallog]);\n\t};\n\n\treturn closure;\n};\n\n/**\n * @desc An object containg compiler fields and functions to be exported.\n * @since 0.1.0\n */\nconst compiler = {\n\t/**\n\t * @see #messages\n\t */\n\t_messages: messages,\n\t/**\n\t * @desc Attempts to compile from string contained in `req.code`.  Adds\n\t * results to `req.compiler.err` and `req.compiler.compiled` respectively.\n\t * @param {Object} req Express request object\n\t * @param {Object} res Express response object\n\t * @param {function} next Function to be called by Express next.\n\t * @since 0.1.0\n\t */\n\tcompileRequest: (req, res, next) => {\n\t\treq.compiler = {\n\t\t\tcompiled: null,\n\t\t\terror: null\n\t\t};\n\t\tif (req.code) {\n\t\t\tcompiler.compileString(req.code, (err, compiled) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treq.compiler.error = err;\n\t\t\t\t} else {\n\t\t\t\t\treq.compiler.compiled = compiled;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tnext();\n\t},\n\t/**\n\t * @param {string} code String containing code to be compiled\n\t * @param {function} callback Function to which to pass the compilation\n\t * results.  Function expected to include params `err` and `compiled`.\n\t * @since 0.1.0\n\t */\n\tcompileString: (code, callback) => {\n\t\tlet compiled, err;\n\n\t\ttry {\n\t\t\tlet ast = parse(code);\n\t\t\tvalidate(ast);\n\t\t\tcompiled = compile(code);\n\t\t} catch (e) {\n\t\t\terr =\n\t\t\t\te instanceof CompilerError ? e : new CompilerError(e.message, null, e);\n\t\t} finally {\n\t\t\tcallback(err, compiled);\n\t\t}\n\t}\n};\n\n/**\n * @param {string} code String containing code to be parsed.\n * @return {Object} AST from `esprima` module.\n * @since 0.1.0\n */\nconst parse = code => {\n\tlet ast = esprima.parse(code, {loc: true});\n\treturn ast;\n};\n\n/**\n * @desc A shorthand function to throw a `CompilerError`\n * @param {string} message Message to include in `CompileError`.\n * @param {Object} node (Optional) node object from esprima where the failure\n * occurred.\n * @throws {CompilerError} Error with line location info if applicable.\n * @since 0.1.0\n */\nconst throwError = (message, node) => {\n\tlet err = new CompilerError(message, node);\n\tthrow err;\n};\n\n/**\n * @desc A void function that validates a ceallog function syntax tree based on\n * a series of rules, and throwing an error if not.\n * @param {Object} ast ceallog function abstract syntax tree to be validated.\n * @since 0.1.0\n */\nconst validate = ast => {\n\tif (ast) {\n\t\tif (ast.body.length > 1) {\n\t\t\tthrow new Error(messages.MULTIPLE_TOP_LEVEL_STATEMENTS);\n\t\t} else if (\n\t\t\t0 in ast.body &&\n\t\t\t(!ast.body[0].expression ||\n\t\t\t\tast.body[0].expression.type != 'ArrowFunctionExpression')\n\t\t) {\n\t\t\tthrow new Error(messages.NOT_AN_ARROW_FUNCTION);\n\t\t}\n\n\t\twalk(ast, node => {\n\t\t\tlet isIdentifier = node.type == 'Identifier';\n\n\t\t\t// Handle illegal identifiers\n\t\t\tif (isIdentifier) {\n\t\t\t\tswitch (node.name) {\n\t\t\t\t\tcase '__dirname':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_DIRNAME, node);\n\t\t\t\t\tcase '__filename':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_FILENAME, node);\n\t\t\t\t\tcase 'clearImmediate':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_CLEARIMMEDIATE, node);\n\t\t\t\t\tcase 'clearInterval':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_CLEARINTERVAL, node);\n\t\t\t\t\tcase 'clearTimeout':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_CLEARTIMEOUT, node);\n\t\t\t\t\tcase 'console':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_CONSOLE, node);\n\t\t\t\t\tcase 'exports':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_EXPORTS, node);\n\t\t\t\t\tcase 'global':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_GLOBAL, node);\n\t\t\t\t\tcase 'eval':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_EVAL, node);\n\t\t\t\t\tcase 'module':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_MODULE, node);\n\t\t\t\t\tcase 'process':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_PROCESS, node);\n\t\t\t\t\tcase 'require':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_REQUIRE, node);\n\t\t\t\t\tcase 'setImmediate':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_SETIMMEDIATE, node);\n\t\t\t\t\tcase 'setInterval':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_SETINTERVAL, node);\n\t\t\t\t\tcase 'setTimeout':\n\t\t\t\t\t\tthrowError(messages.ILLEGAL_SETTIMEOUT, node);\n\t\t\t\t}\n\n\t\t\t\tif (node.name in process) {\n\t\t\t\t\tthrowError(`Use of \\`process.${node.name}\\` is illegal.`, node);\n\t\t\t\t} else if (node.name in global) {\n\t\t\t\t\tthrowError(`Use of identifier \\`${node.name}\\` is illegal.`, node);\n\t\t\t\t}\n\t\t\t} else if (node.type == 'ThisExpression') {\n\t\t\t\tthrowError(messages.ILLEGAL_THIS, node);\n\t\t\t}\n\t\t});\n\t}\n};\n\nmodule.exports = compiler;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/compiler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "CompilerError",
    "memberof": "src/compiler.js",
    "static": true,
    "longname": "src/compiler.js~CompilerError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "messages",
    "memberof": "src/compiler.js",
    "static": true,
    "longname": "src/compiler.js~messages",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of message\nand the value is a string with the message itself.",
    "lineNumber": 21,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"ILLEGAL_DIRNAME\": string, \"ILLEGAL_FILENAME\": string, \"ILLEGAL_CLEARIMMEDIATE\": string, \"ILLEGAL_CLEARINTERVAL\": string, \"ILLEGAL_CLEARTIMEOUT\": string, \"ILLEGAL_CONSOLE\": string, \"ILLEGAL_EXPORTS\": string, \"ILLEGAL_EVAL\": string, \"ILLEGAL_GLOBAL\": string, \"ILLEGAL_MODULE\": string, \"ILLEGAL_PROCESS\": string, \"ILLEGAL_REQUIRE\": string, \"ILLEGAL_SETIMMEDIATE\": string, \"ILLEGAL_SETINTERVAL\": string, \"ILLEGAL_SETTIMEOUT\": string, \"ILLEGAL_THIS\": string, \"MULTIPLE_TOP_LEVEL_STATEMENTS\": string, \"NOT_A_FUNCTION\": string, \"NOT_AN_ARROW_FUNCTION\": string, \"PARSER_FAILURE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "compile",
    "memberof": "src/compiler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/compiler.js~compile",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 54,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Code to compile."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "A closure function that takes a `Ceallog` instance as a\nparam. When this function is executed, it applies a `null` scope to the\ncompiled function and passes the `Ceallog` instance as its sole argument."
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "compiler",
    "memberof": "src/compiler.js",
    "static": true,
    "longname": "src/compiler.js~compiler",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "An object containg compiler fields and functions to be exported.",
    "lineNumber": 73,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"_messages\": *, \"compileRequest\": *, \"compileString\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "parse",
    "memberof": "src/compiler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/compiler.js~parse",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 129,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "String containing code to be parsed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "AST from `esprima` module."
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "throwError",
    "memberof": "src/compiler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/compiler.js~throwError",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "A shorthand function to throw a `CompilerError`",
    "lineNumber": 142,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message to include in `CompileError`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "(Optional) node object from esprima where the failure\noccurred."
      }
    ],
    "throws": [
      {
        "types": [
          "CompilerError"
        ],
        "description": "Error with line location info if applicable."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "validate",
    "memberof": "src/compiler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/compiler.js~validate",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/compiler.js",
    "importStyle": null,
    "description": "A void function that validates a ceallog function syntax tree based on\na series of rules, and throwing an error if not.",
    "lineNumber": 153,
    "since": "0.1.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "ceallog function abstract syntax tree to be validated."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/models/CeallogFunction.js",
    "content": "/**\n * @desc Exports `CeallogFunction` mongoose schema.\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst mongoose = require('mongoose'),\n\tsettings = require('../settings');\n\nmongoose.Promise = global.Promise;\n\n/**\n * @ignore\n */\nconst uri = settings.mongo.uri,\n\tdb = mongoose.createConnection(uri),\n\tSchema = mongoose.Schema;\n\n/**\n * @ignore\n */\nconst CeallogFunctionSchema = new Schema({\n\tbody: {\n\t\trequired: '`body` must be populated.',\n\t\ttype: String\n\t},\n\tcompiled: {\n\t\ttype: Boolean\n\t},\n\tcreated_date: {\n\t\tdefault: Date.now,\n\t\ttype: Date\n\t},\n\tname: {\n\t\trequired: '`name` must be populated.',\n\t\ttype: String\n\t},\n\tlabel: {\n\t\trequired: '`label` must be populated.',\n\t\ttype: String\n\t},\n\tpublished: {\n\t\tdefault: false,\n\t\ttype: Boolean\n\t}\n});\n\nmodule.exports = db.model('CeallogFunction', CeallogFunctionSchema);\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/models/CeallogFunction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/models/CeallogFunction.js",
    "static": true,
    "longname": "src/models/CeallogFunction.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/models/CeallogFunction.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "uri",
    "memberof": "src/models/CeallogFunction.js",
    "static": true,
    "longname": "src/models/CeallogFunction.js~uri",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/models/CeallogFunction.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "CeallogFunctionSchema",
    "memberof": "src/models/CeallogFunction.js",
    "static": true,
    "longname": "src/models/CeallogFunction.js~CeallogFunctionSchema",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/models/CeallogFunction.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/mongoose-util.js",
    "content": "/**\n * @desc An utility with some helpful functions for use with the mongoose\n * module.\n * @since 0.1.0\n */\n'use strict';\n\n/**\n * @ignore\n */\nconst mongoose = require('mongoose');\n\n/**\n * @desc An object acting like a map where key represents the type of\n * response from a mongo database transaction (eg. `'INVALID_ID'`), and value is\n * an object with `statusCode` and `message` properties, respectively.\n * @since 0.1.0\n */\nconst responses = {\n\tINVALID_ID: {\n\t\tstatusCode: 400,\n\t\tmessage: 'Invalid id.'\n\t},\n\tINTERNAL_SERVER_ERROR: {\n\t\tstatusCode: 500,\n\t\tmessage: 'An internal error occurred.'\n\t},\n\tMISSING_PARAMS: {\n\t\tstatusCode: 400,\n\t\tmessage: 'Missing required query parameters.'\n\t},\n\tMISSING_RESOURCE: {\n\t\tstatusCode: 404,\n\t\tmessage: 'Missing resource.'\n\t},\n\tREMOVED_RESOURCE: {\n\t\tstatusCode: 204,\n\t\tmessage: null\n\t},\n\tRESOURCE_NOT_FOUND: {\n\t\tstatusCode: 404,\n\t\tmessage: 'Resource not found.'\n\t},\n\tSAVE_RESULT: {\n\t\tstatusCode: 201,\n\t\tmessage: 'Resource created.'\n\t},\n\tSUCCESS: {\n\t\tstatusCode: 200,\n\t\tmessage: 'Resource retrieved successfully.'\n\t},\n\tUPDATE_RESULT: {\n\t\tstatusCode: 204,\n\t\tmessage: null\n\t},\n\tUPDATE_ERROR: {\n\t\tstatusCode: 406,\n\t\tmessage: 'Server rejected partial resource.'\n\t},\n\tVALIDATION_ERROR: {\n\t\tstatusCode: 400,\n\t\tmessage: 'There were problems with the values you provided. Please review.'\n\t}\n};\n\n/**\n * @desc Utility object.\n * @since 0.1.0\n */\nconst util = {\n\t/**\n\t * @param {string} str The id to be converted.\n\t * @return {mongoose.Types.ObjectId} The id as a mongoose type.\n\t * @since 0.1.0\n\t */\n\tgetObjectId: str => {\n\t\tlet oid = null;\n\t\ttry {\n\t\t\toid = mongoose.Types.ObjectId(str);\n\t\t} catch (e) {} // TODO: define exception behaviour\n\t\treturn oid;\n\t},\n\t/**\n\t * @param {Object} req The express request related to the transaction.\n\t * @return {function} A callback function that prepares and returns an\n\t * object describing the state of the database transaction when passed `err`\n\t * and `results` params.  This object includes `message`, `statusCode`, and\n\t * `type` fields in all cases, as well as others.\n\t * @since 0.1.0\n\t */\n\tdbResultCallback: req => {\n\t\treturn function(err, results) {\n\t\t\treq.mongooseResults = req.mongooseResults || [];\n\n\t\t\tlet mongooseResult = {};\n\n\t\t\tmongooseResult.isErr =\n\t\t\t\terr != null &&\n\t\t\t\ttypeof err == 'object' &&\n\t\t\t\t'name' in err &&\n\t\t\t\t'errors' in err;\n\t\t\t// mongooseResult.isSave = !mongooseResult.isErr && !err && results && typeof results == 'object' && '_id' in results;\n\t\t\tmongooseResult.isUpdate =\n\t\t\t\t!mongooseResult.isErr &&\n\t\t\t\t!err &&\n\t\t\t\tresults &&\n\t\t\t\ttypeof results == 'object' &&\n\t\t\t\t'ok' in results;\n\t\t\tmongooseResult.isDelete =\n\t\t\t\t!mongooseResult.isErr &&\n\t\t\t\t!err &&\n\t\t\t\tresults &&\n\t\t\t\ttypeof results == 'object' &&\n\t\t\t\t'result' in results &&\n\t\t\t\t'ok' in results.result;\n\t\t\tmongooseResult.results = results;\n\t\t\tmongooseResult.err = err;\n\n\t\t\tswitch (true) {\n\t\t\t\tcase err != null && err.name == 'ValidationError':\n\t\t\t\t\tmongooseResult.type = 'VALIDATION_ERROR';\n\t\t\t\t\tbreak;\n\t\t\t\tcase mongooseResult.isSave:\n\t\t\t\t\tmongooseResult.type = 'SAVE_RESULT';\n\t\t\t\t\tbreak;\n\t\t\t\tcase mongooseResult.isUpdate && results.ok > 0:\n\t\t\t\t\tmongooseResult.type = 'UPDATE_RESULT';\n\t\t\t\t\tbreak;\n\t\t\t\tcase mongooseResult.isUpdate && results.ok == 0:\n\t\t\t\t\tmongooseResult.type = 'UPDATE_ERROR';\n\t\t\t\t\tbreak;\n\t\t\t\tcase mongooseResult.isDelete:\n\t\t\t\t\tmongooseResult.type = 'REMOVED_RESOURCE';\n\t\t\t\t\tbreak;\n\t\t\t\tcase err != null:\n\t\t\t\t\tmongooseResult.type = 'INTERNAL_SERVER_ERROR';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmongooseResult.type = 'SUCCESS';\n\t\t\t}\n\n\t\t\tmongooseResult.message = responses[mongooseResult.type].message;\n\t\t\tmongooseResult.statusCode = responses[mongooseResult.type].statusCode;\n\n\t\t\treq.mongooseResults.push(mongooseResult);\n\n\t\t\treturn mongooseResult;\n\t\t};\n\t}\n};\n\nmodule.exports = util;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/mongoose-util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/mongoose-util.js",
    "static": true,
    "longname": "src/mongoose-util.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/mongoose-util.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "responses",
    "memberof": "src/mongoose-util.js",
    "static": true,
    "longname": "src/mongoose-util.js~responses",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/mongoose-util.js",
    "importStyle": null,
    "description": "An object acting like a map where key represents the type of\nresponse from a mongo database transaction (eg. `'INVALID_ID'`), and value is\nan object with `statusCode` and `message` properties, respectively.",
    "lineNumber": 19,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"INVALID_ID\": *, \"INTERNAL_SERVER_ERROR\": *, \"MISSING_PARAMS\": *, \"MISSING_RESOURCE\": *, \"REMOVED_RESOURCE\": *, \"RESOURCE_NOT_FOUND\": *, \"SAVE_RESULT\": *, \"SUCCESS\": *, \"UPDATE_RESULT\": *, \"UPDATE_ERROR\": *, \"VALIDATION_ERROR\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "util",
    "memberof": "src/mongoose-util.js",
    "static": true,
    "longname": "src/mongoose-util.js~util",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/mongoose-util.js",
    "importStyle": null,
    "description": "Utility object.",
    "lineNumber": 70,
    "since": "0.1.0",
    "type": {
      "types": [
        "{\"getObjectId\": *, \"dbResultCallback\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/plugins/cealloga-variables-plugin.js",
    "content": "'use strict';\n\nmodule.exports = {\n    afterExecute: request => {\n        return;\n    },\n    beforeExecute: request => {\n        this.variables(request.body);\n    },\n    extend: () => {\n        let scope = this;\n        \n        scope.variables = variables => {\n            scope._variables = variables || scope._variables || [];\n\n            return scope._variables;\n        };\n    }\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/plugins/cealloga-variables-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/safe-eval.js",
    "content": "module.exports = code => {\n\treturn eval(code);\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/safe-eval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/settings.js",
    "content": "/**\n * @desc Reads the appropriate settings json file, parses it, and exports it as\n * an object.\n * @version 0.1.0\n */\n\n'use strict';\n\n/**\n * ignore\n */\nconst isTest = typeof global.it === 'function',\n    fs = require('fs'),\n    path = require('path'),\n    ceallogaDir = __dirname,\n    resourcesDir = path.join(ceallogaDir, 'resources'),\n    settingsFile = isTest ? 'settings.test.json' : 'settings.prod.json',\n    settingsPath = path.join(resourcesDir, settingsFile),\n    settingsBuf = fs.readFileSync(settingsPath, 'utf8'),\n    settings = JSON.parse(settingsBuf);\n\nsettings.isTest = isTest;\n\nmodule.exports = settings;\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "isTest",
    "memberof": "src/settings.js",
    "static": true,
    "longname": "src/settings.js~isTest",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/settings.js",
    "importStyle": null,
    "description": "ignore",
    "lineNumber": 12,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "src/uri-blacklist.js",
    "content": "/**\n * @desc Exposes utilities for working with the uri blacklist as defined in\n * the settings json file.\n * @since 0.1.0\n */\n\n'use strict';\n\n/**\n * @ignore\n */\nconst uriBlacklistArray = require('./settings').uri_blacklist;\n\n/**\n * @ignore\n */\nlet uriBlacklistObject = {};\n\nuriBlacklistArray.forEach(uri => {\n\turiBlacklistObject[uri] = 0;\n});\n\nmodule.exports = {\n\t/**\n\t * @param {string} uri The uri to check in the blacklist.\n\t * @return {boolean} Whether the uri is included in the blacklist.\n\t * @since 0.1.0\n\t */\n\thas: uri => {\n\t\treturn uri in uriBlacklistObject;\n\t}\n};\n",
    "static": true,
    "longname": "/home/ubuntu/workspace/cealloga/src/uri-blacklist.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "uriBlacklistArray",
    "memberof": "src/uri-blacklist.js",
    "static": true,
    "longname": "src/uri-blacklist.js~uriBlacklistArray",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/uri-blacklist.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "uriBlacklistObject",
    "memberof": "src/uri-blacklist.js",
    "static": true,
    "longname": "src/uri-blacklist.js~uriBlacklistObject",
    "access": "public",
    "export": false,
    "importPath": "cealloga/src/uri-blacklist.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# cealloga\n[![Build Status](https://travis-ci.org/ancamcheachta/cealloga.svg?branch=master)](https://travis-ci.org/ancamcheachta/cealloga)\n[![Coverage Status](https://coveralls.io/repos/ancamcheachta/cealloga/badge.svg)](https://coveralls.io/r/ancamcheachta/cealloga)\n\nSimple microservices on demand\n\n## Requirements\n* [Node 6.11+](https://nodejs.org/en/download/)\n* [MongoDB 3.4+](https://docs.mongodb.com/manual/installation/)\n\n## TODO\n* [x] Document `/code` (GET)\n* [x] Document `/code/:id` (GET)\n* [x] Document `/code/validate` (POST)\n* [x] Document `/code/publish/:id` (GET)\n* [x] Document `/code/unpublish/:name` (GET)\n* [x] Support successful `POST` request to `/code/validate`\n* [x] Support failed `POST` request to `/code/validate`\n* [x] Write tests for `/code/validate`\n* [x] Support successful `GET` request to `/code/publish`\n* [x] Support failing `GET` request to `/code/publish`\n* [x] Standardise error handling in publish.js and validate.js\n* [x] Support successful `GET` request to `/code/unpublish`\n* [x] Support successful `GET` request to `/code/:id`\n* [x] Support successful `GET` request to `/code`\n* [x] Add formatter for `/code` list response\n* [x] Add URI name validation regex to `/code/validate`\n* [x] Add URI blacklist check to `/code/validate`\n* [ ] Document `/cealloga/_test/:id` (POST)\n* [ ] Document `/cealloga/:name` (POST)\n",
    "longname": "/home/ubuntu/workspace/cealloga/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cealloga\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Simple microservices on demand\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"nyc mocha --exit\",\n    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\"\n  },\n  \"author\": \"An Camchéachta\",\n  \"repository\": \"https://github.com/ancamcheachta/cealloga\",\n  \"license\": \"GPL-3.0\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.18.2\",\n    \"chai\": \"^4.1.2\",\n    \"chai-http\": \"^3.0.0\",\n    \"esprima\": \"^4.0.0\",\n    \"esprima-walk\": \"^0.1.0\",\n    \"express\": \"^4.16.2\",\n    \"mongoose\": \"^4.13.7\",\n    \"request\": \"^2.83.0\"\n  },\n  \"devDependencies\": {\n    \"coveralls\": \"^3.0.0\",\n    \"mocha\": \"^4.1.0\",\n    \"mocha-lcov-reporter\": \"^1.3.0\",\n    \"nyc\": \"^11.4.1\"\n  }\n}\n",
    "longname": "/home/ubuntu/workspace/cealloga/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]